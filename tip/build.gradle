buildscript {
    ext {
        corda_release_group = 'net.corda'
        corda_release_version = '4.0'
        corda_gradle_plugins_version = '4.0.45'
        junit_version = '4.12'
        quasar_version = '0.7.10'
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
        slf4j_version = '1.7.25'
        log4j_version = '2.11.2'
        corda_platform_version = '4'
        corbeans_version = '0.26'
        corda_solutions_version = '2.0'
        tokens_release_version = '1.0'
        tokens_release_group = 'com.r3.corda.lib.tokens'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        maven {url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-solutions-releases' }
        maven { url 'https://software.r3.com/artifactory/corda' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-lib' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-lib-dev' }


    }

    dependencies {
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

allprojects {
    apply plugin: 'java'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-solutions-releases' }
        maven { url 'https://software.r3.com/artifactory/corda' }
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-parameters" // Required by Corda's serialisation framework.
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}


apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

cordapp {
    info {
        name "Transportation Investment Platform CorDapp"
        vendor "AftaRobot"
        targetPlatformVersion corda_platform_version.toInteger()
        minimumPlatformVersion corda_platform_version.toInteger()
    }
}

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {
    testCompile "junit:junit:$junit_version"

    // Corda dependencies.
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":workflows")
    cordapp project(":contracts")
    cordapp "com.r3.businessnetworks:membership-service:2.0"
    cordapp "com.r3.businessnetworks:membership-service-contracts-and-states:2.0"

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"


//    // Optional: control the BNMS dependency versions
    compile "com.r3.businessnetworks:membership-service:$corda_solutions_version"
    compile "com.r3.businessnetworks:membership-service-contracts-and-states:$corda_solutions_version"

}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(':contracts')
        cordapp project(':workflows')
        cordapp "com.r3.businessnetworks:membership-service:2.0"
        cordapp "com.r3.businessnetworks:membership-service-contracts-and-states:2.0"
//        cordapp "$tokens_release_group:tokens-contracts:$tokens_release_version"
//        cordapp "$tokens_release_group:tokens-workflows:$tokens_release_version"
//        cordapp "$tokens_release_group:tokens-money:$tokens_release_version"
    }
    node {
        name "O=Notary,L=Pretoria,C=ZA"
        notary = [validating : false]
        p2pPort 10121
        rpcSettings {
            address("localhost:10122")
            adminAddress("localhost:10123")
        }
    }

    node {
        name "O=InsuranceNode,L=Pretoria,C=ZA"
        p2pPort 10024
        rpcSettings {
            address("localhost:10125")
            adminAddress("localhost:10126")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]

    }
    node {
        name "O=BankNode,L=Johannesburg,C=GB"
        p2pPort 10027
        rpcSettings {
            address("localhost:10128")
            adminAddress("localhost:10129")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]

    }
    node {
        name "O=AftaRobotBNO,L=Johannesburg,C=ZA"
        p2pPort 10030
        rpcSettings {
            address("localhost:10131")
            adminAddress("localhost:10132")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]

    }

    node {
        name "O=RegulatorNode,L=Pretoria,C=ZA"
        p2pPort 10033
        rpcSettings {
            address("localhost:10134")
            adminAddress("localhost:10135")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]

    }

}

task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}
